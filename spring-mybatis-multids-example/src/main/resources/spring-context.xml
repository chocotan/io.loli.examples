<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:cache="http://www.springframework.org/schema/cache"
    xmlns:task="http://www.springframework.org/schema/task"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/cache
    http://www.springframework.org/schema/cache/spring-cache.xsd
    http://www.springframework.org/schema/task  
    http://www.springframework.org/schema/task/spring-task.xsd">

    <context:property-placeholder location="classpath:database.properties" />
    <context:component-scan base-package="io.loli.example.spring.multids" />
    <!-- 启动AspectJ支持 -->
    <aop:aspectj-autoproxy />

    <!-- <cache:annotation-driven mode="aspectj" /> -->

    <!-- <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"> 
        <property name="hostName" value="${redis.host}" /> <property name="port" 
        value="${redis.port}" /> <property name="usePool" value="true" /> </bean> -->

    <!-- <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"> 
        <property name="connectionFactory" ref="jedisConnectionFactory" /> </bean> -->

    <!-- <bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager"> 
        <constructor-arg ref="redisTemplate" /> </bean> -->

    <!-- ds1 -->
    <bean id="pda1DS" class="com.alibaba.druid.pool.DruidDataSource"
        init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${db1.connection.url}" />
        <property name="username" value="${db1.connection.username}" />
        <property name="password" value="${db1.connection.password}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${db1.initialSize}" />
        <property name="minIdle" value="${db1.minIdle}" />
        <property name="maxActive" value="${db1.maxActive}" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${db1.maxWait}" />
    </bean>
    <!-- ds2-->
    <bean id="pda2DS" class="com.alibaba.druid.pool.DruidDataSource"
        init-method="init" destroy-method="close">
        <property name="url" value="${db2.connection.url}" />
        <property name="username" value="${db2.connection.username}" />
        <property name="password" value="${db2.connection.password}" />
        <property name="initialSize" value="${db2.initialSize}" />
        <property name="minIdle" value="${db2.minIdle}" />
        <property name="maxActive" value="${db2.maxActive}" />
        <property name="maxWait" value="${db2.maxWait}" />
    </bean>

    <!-- ds3 -->
    <bean id="ztoDS" class="com.alibaba.druid.pool.DruidDataSource">
        <!-- 基本属性 url、user、password -->
        <property name="driverClassName" value="${db3.connection.driver}"></property>
        <property name="url" value="${db3.connection.url}" />
        <property name="username" value="${db3.connection.username}" />
        <property name="password" value="${db3.connection.password}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${db3.initialSize}" />
        <property name="minIdle" value="${db3.minIdle}" />
        <property name="maxActive" value="${db3.maxActive}" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${db3.maxWait}" />
    </bean>


    <bean id="dataSource" class="io.loli.example.spring.multids.db.MultiDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry value-ref="pda1DS" key="pda1DS"></entry>
                <entry value-ref="pda2DS" key="pda2DS"></entry>
                <entry value-ref="ztoDS" key="ztoDS"></entry>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="ztoDS" />
    </bean>

    <!-- ibatis session factory -->
    <!-- 之所以改名是因为如果不改，下面的MapperScannerConfigurer就会导致context:property-placeholder标签失效 -->
    <bean id="ysSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:ibatis.xml" />
        <property name="mapperLocations" value="classpath*:ibatis/*.xml" />
        <property name="dataSource" ref="dataSource" />
        <!-- <property name="typeAliasesPackage" value="io.loli.example.spring.multids.mapper" 
            /> -->
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="io.loli.example.spring.multids.mapper" />
        <property name="sqlSessionFactoryBeanName" value="ysSqlSessionFactory" />
    </bean>


    <!-- 配置事务管理器 -->
    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager" />


</beans>